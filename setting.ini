#the task that is going to be performed
#singlepoint : only calculate energy and gradient
#cartesian   : using cartesian coordinates
#internal    : using redundant internal coodinates
task = internal

#output level that is used
#in singlepoint, debug and info is the same
#debug : output debugging information including matrix elements of B, G, ...
#info  : output only coordinates, energies ...
output = info

inputFile = input/methane.mol2

outputFile = output/methane.out6


#eigenSolver used
#lapack : lapack routine dsyev, faster, stronger, and default.
#jiang  : built in eigenSolver, Matrix::eigenDecomposition in mathj.cpp. Slower, weaker.

eigenSolver = lapack

#! 15/12/2024 ------------------------------------------------------
#! Now I find that my eigenSolver have some problem, do not use now. 
#! -----------------------------------------------------------------

#! 16/12/2024 -------------------------------------------------------------------------------------------------
#! Sort of solved for now. The reason is that the close-to-zero diagonal elements is not ignored sometimes. 
#! I manually increase the threshold for that but it does not guarantee that this problem does not occur agian.
#! Another problem is that when optimization is close to the end, the eigen decomposition is hard to converge.
#! So it is not usable still.
#! ------------------------------------------------------------------------------------------------------------

tolerance = 0.0001
